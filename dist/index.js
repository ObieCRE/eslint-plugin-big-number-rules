/*
 * eslint-plugin-big-number-rules
 * v1.4.0
 * https://github.com/shuckster/eslint-plugin-big-number-rules
 * License: MIT
 */
"use strict";var e={isPojo:function(e){return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===Object.prototype}};const{isPojo:t}=e;function r(e="construct",r="BigNumber"){return n=>{const{settings:i}=n,a=i["big-number-rules"]?.[e]??r;return t(r)&&t(a)&&r!==a?{...r,...a}:a}}const n=r("construct","BigNumber");var i={makeSettingGetter:r,isPojo:t,getConstruct:n};const{makeSettingGetter:a,getConstruct:o}=i,c=a("arithmetic",{"+":"plus","-":"minus","/":"dividedBy","*":"multipliedBy","**":"exponentiatedBy","%":"modulo"}),s=a("comparison",{"<":"isLessThan","<=":"isLessThanOrEqualTo","===":"isEqualTo","==":"isEqualTo",">=":"isGreaterThanOrEqualTo",">":"isGreaterThan"}),u=a("bitwise",{">>":"shiftedBy",">>>":"shiftedBy","<<":["${L}","shiftedBy","-${R}"]}),l=a("sum","sum"),p=a("supportsSum",!0),m=a("supportsBitwise",!0);function f(e){return"CallExpression"===e?.type&&"MemberExpression"===e?.callee?.type}function g(e,t){return function(e,t){return"CallExpression"===t?.type&&"Identifier"===t?.callee?.type&&t?.callee?.name===o(e)}(e,t)||function(e,t){return f(t)&&"Identifier"===t?.callee?.object?.type&&t?.callee?.object?.name===o(e)&&"Identifier"===t?.callee?.property?.type&&t?.callee?.property?.name===l(e)}(e,t)}const b=[];function d(e){try{if("BinaryExpression"!==e.type)return!0;if("+"!==e.operator)throw new Error("not a +");return d(e.left)&&d(e.right)}catch(e){return!1}}function y(e){const t=m(e),r={...c(e),...s(e)},n=Object.keys(r),i=u(e),a=Object.keys(i),l={...r,...i};function y(t,r,n){const i=l[r];return(function(e){return Array.isArray(e)&&3===e.length&&e.every((e=>"string"==typeof e))}(i)?function(t){return(r,n)=>t.map((t=>t.replace("__CONSTRUCT__",o(e)).replace("${L}",r).replace("${R}",n)))}(i):(e,t)=>[e,i,t])(t,n)}return r=>{const i=n.includes(r.operator),c=a.includes(r.operator);if(!i&&!c)return;const s=e.getSource(r);if(c&&!t){const t=o(e);return void e.report({node:r,message:`is '${s}' a financial calculation? If so, bitwise methods are not supported by ${t}\n`})}const u=p(e)&&d(r),l=function(e,t){let r=t;for(;!g(e,r);){if(!f(r))return!1;r=r.callee.object}return!0}(e,r.left);b.push({node:r,original:s,summable:u&&!l,report:{node:r,message:`is '${s}' a financial calculation?`,fix:t=>{const{operator:n,left:i,right:a}=r,c=e.getSource(i),s=e.getSource(a);return l?t.replaceText(r,function(e,t,r){const[,n,i]=y(e,t,r);return`${e}.${n}(${i})`}(c,n,s)):t.replaceText(r,function(e,t,r,n){const i=o(e),[a,c,s]=y(t,r,n);return`${i}(${a}).${c}(${s})`}(e,c,n,s))}}})}}function $(e,t){return"BinaryExpression"!==t.type?[e.getSource(t)]:[...$(e,t.left),...$(e,t.right)].flat()}function h(e,t){const r=$(e,t).join(", ");return`${o(e)}.${l(e)}(${r})`}function x(e){return t=>{if(r=t,!b.find((({node:e})=>e===r)))return;var r;const{node:n,original:i,summable:a,report:o}=b.pop();a?b.length&&b[b.length-1]?.summable||e.report({node:n,message:`is '${i}' a financial calculation?`,fix:t=>t.replaceText(n,h(e,n))}):e.report(o)}}var N={create:e=>({BinaryExpression:y(e),"BinaryExpression:exit":x(e)}),meta:{category:"Financial, Currency",description:"Replace JavaScript arithmetic with BigNumber methods",fixable:"code"}};const{getConstruct:_}=i;function C(e){return(t,r)=>{const n=r.parent;if("MemberExpression"!==n.type)return!1;const i=e.replace("__CONSTRUCT__",_(t));return"CallExpression"===n?.object?.type&&"Identifier"===n?.object?.callee?.type&&n?.object?.callee?.name===i||"Identifier"===n?.object?.type&&n?.object?.name===i}}const S=C("__CONSTRUCT__");var T={IdentifierIsAlreadyBigNumberMethod:S,makeIdentifierMembershipDetector:C,makeGlobalIdentifierFixer:function(e){const t=Object.keys(e);return r=>n=>{if(!t.includes(n.name))return;if(S(r,n))return;const i=r.getSource(n);r.report({node:n,message:`is '${i}' a financial calculation?`,fix:t=>{const i=e[n.name];return t.replaceText(n,i(r))}})}}};const{getConstruct:O}=i,{makeGlobalIdentifierFixer:j}=T,E=j({isNaN:e=>`${O(e)}.isNaN`});var B={create:e=>({Identifier:E(e)}),meta:{category:"Financial, Currency",description:"Replace isNaN with BigNumber equivalent",fixable:"code"}};const{makeSettingGetter:R,getConstruct:I}=i,v=R("math",{min:"minimum",max:"maximum",random:"random",abs:"absoluteValue",sign:["__CONSTRUCT__(${A}).comparedTo(0)"],sqrt:"squareRoot"});function A(e){const t=v(e),r=Object.keys(t);return n=>{const{callee:i}=n;if("MemberExpression"!==i.type)return;if("Math"!==i?.object?.name)return;const a=i?.property?.name;if(!r.includes(a))return;const o=e.getSource(n);e.report({node:n,message:`is '${o}' a financial calculation?`,fix:r=>r.replaceText(n,function(e,r,n){const i=t[n],a=r.arguments.map((t=>e.getSource(t))).join(", "),o=I(e);if(Array.isArray(i)){if(1===i.length)return i[0].replace("__CONSTRUCT__",o).replace("${A}",a);if(2===i.length)return`${o}.${i[0]}(${i.slice(1).map((e=>e.replace("${A}",a)))})`}return`${o}.${i}(${a})`}(e,n,a))})}}var F={create:e=>({CallExpression:A(e)}),meta:{category:"Financial, Currency",description:"Replace JavaScript Math methods with BigNumber equivalents",fixable:"code"}};const{makeSettingGetter:w,getConstruct:k}=i,{IdentifierIsAlreadyBigNumberMethod:M}=T,U=w("number",{toFixed:"decimalPlaces",parseFloat:["__CONSTRUCT__(${A})"],toExponential:"toExponential",toPrecision:"toPrecision",toString:"toString"});function G(e){const t=U(e),r=Object.keys(t);return n=>{const{callee:i}=n;if("MemberExpression"!==i.type)return;if("Identifier"!==i?.property?.type)return;const a=i?.property?.name;if(!r.includes(a))return;if(M(e,i?.property))return;const o=e.getSource(n);e.report({node:n,message:`is '${o}' a financial calculation?`,fix:r=>r.replaceText(n,function(e,r,n){const i=t[n],a=r.arguments.map((t=>e.getSource(t))).join(", "),o=k(e),c=e.getSource(r?.callee?.object);return"Number"===r?.callee?.object?.name&&Array.isArray(i)&&1===i.length?i[0].replace("__CONSTRUCT__",o).replace("${O}",c).replace("${A}",a):`${o}(${c}).${i}(${a})`}(e,n,a))})}}var q={create:e=>({CallExpression:G(e)}),meta:{category:"Financial, Currency",description:"Replace JavaScript Number.prototype methods with BigNumber equivalents",fixable:"code"}};const{getConstruct:D}=i,{makeGlobalIdentifierFixer:L}=T,P=L({parseFloat:e=>D(e)});var J={create:e=>({Identifier:P(e)}),meta:{category:"Financial, Currency",description:"Replace parseFloat with BigNumber equivalent",fixable:"code"}};const{makeSettingGetter:V,getConstruct:H}=i,W={floor:"BigNumber.set({\n  ROUNDING_MODE: BigNumber.ROUND_FLOOR\n})",ceil:"BigNumber.set({\n  ROUNDING_MODE: BigNumber.ROUND_CEIL\n})",round:"BigNumber.set({\n  ROUNDING_MODE: BigNumber.ROUND_HALF_EVEN\n})"},z=V("supportsRound",!1),K=V("rounding",W);function Q(e){const t=Object.keys(W),r=K(e);return n=>{const{callee:i}=n;if("MemberExpression"!==i.type)return;if("Math"!==i?.object?.name)return;const a=i?.property?.name;if(!t.includes(a))return;const o=z(e),c=e.getSource(n);o?e.report({node:n,message:`is '${c}' a financial calculation?`,fix:t=>t.replaceText(n,function(e,t,n){const i=r[n],a=t.arguments.map((t=>e.getSource(t))).join(", "),o=H(e);if(Array.isArray(i)){if(1===i.length)return i[0].replace("__CONSTRUCT__",o).replace("${A}",a);if(2===i.length)return`${o}.${i[0]}(${i.slice(1).map((e=>e.replace("${A}",a)))})`}return`${o}.${i}(${a})`}(e,n,a))}):e.report({node:n,message:`is '${c}' a financial calculation? If so, use the global constructor setting:\n\n${r[a]}\n`})}}var X={rules:{arithmetic:N,isNaN:B,math:F,number:q,parseFloat:J,rounding:{create:e=>({CallExpression:Q(e)}),meta:{category:"Financial, Currency",description:"Warn against using JavaScript Math.round|ceil|floor methods, or offer replacements",fixable:"code"}}},configs:{recommended:{rules:{"big-number-rules/arithmetic":"warn","big-number-rules/isNaN":"warn","big-number-rules/math":"warn","big-number-rules/number":"warn","big-number-rules/parseFloat":"warn","big-number-rules/rounding":"warn"}}}};module.exports=X;
